{"version":3,"sources":["../../src/rules/checkTypes.js"],"names":["strictNativeTypes","adjustNames","type","preferred","isGenericMatch","nodeName","node","parentNode","ret","meta","syntax","dotBracketEnd","match","slice","length","bracketEnd","endsWith","name","replace","jsdocNode","sourceCode","report","utils","settings","context","jsdocTagsWithPossibleType","filterTags","tag","tagMightHaveTypePosition","preferredTypes","noDefaults","unifyParentAndChildTypeChecks","exemptTagContexts","options","getPreferredTypeInfo","parentName","hasMatchingPreferredType","typeName","Object","keys","parentType","some","checkPostFix","syn","undefined","directNameMatch","unifiedSyntaxParentMatch","forEach","jsdocTag","invalidTypes","typeAst","includes","preferredSetting","push","replacement","message","reportSettings","strictNativeType","toLowerCase","fixedType","tagName","badType","preferredType","fix","fixer","replaceText","getText","tagValue","types","iterateAllJsdocs","fixable","schema","additionalProperties","properties","items","oneOf"],"mappings":"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","sourcesContent":["import {parse, traverse, publish} from 'jsdoctypeparser';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst strictNativeTypes = [\n  'undefined',\n  'null',\n  'boolean',\n  'number',\n  'bigint',\n  'string',\n  'symbol',\n  'object',\n  'Array',\n  'Function',\n  'Date',\n  'RegExp',\n];\n\nconst adjustNames = (type, preferred, isGenericMatch, nodeName, node, parentNode) => {\n  let ret = preferred;\n  if (isGenericMatch) {\n    if (preferred === '[]') {\n      parentNode.meta.syntax = 'SQUARE_BRACKET';\n      ret = 'Array';\n    } else {\n      const dotBracketEnd = preferred.match(/\\.(?:<>)?$/u);\n      if (dotBracketEnd) {\n        parentNode.meta.syntax = 'ANGLE_BRACKET_WITH_DOT';\n        ret = preferred.slice(0, -dotBracketEnd[0].length);\n      } else {\n        const bracketEnd = preferred.endsWith('<>');\n        if (bracketEnd) {\n          parentNode.meta.syntax = 'ANGLE_BRACKET';\n          ret = preferred.slice(0, -2);\n        }\n      }\n    }\n  } else if (type === 'ANY') {\n    node.type = 'NAME';\n  }\n  node.name = ret.replace(/(?:\\.|<>|\\.<>|\\[\\])$/u, '');\n\n  // For bare pseudo-types like `<>`\n  if (!ret) {\n    node.name = nodeName;\n  }\n};\n\nexport default iterateJsdoc(({\n  jsdocNode,\n  sourceCode,\n  report,\n  utils,\n  settings,\n  context,\n}) => {\n  const jsdocTagsWithPossibleType = utils.filterTags((tag) => {\n    return utils.tagMightHaveTypePosition(tag.tag);\n  });\n\n  const {preferredTypes} = settings;\n  const {\n    noDefaults,\n    unifyParentAndChildTypeChecks,\n    exemptTagContexts = [],\n  } = context.options[0] || {};\n\n  const getPreferredTypeInfo = (type, nodeName, parentName, parentNode) => {\n    let hasMatchingPreferredType;\n    let isGenericMatch;\n    let typeName = nodeName;\n    if (Object.keys(preferredTypes).length) {\n      const parentType = parentName === 'subject';\n      if (unifyParentAndChildTypeChecks || parentType) {\n        const syntax = parentNode?.meta?.syntax;\n\n        [\n          ['.', 'ANGLE_BRACKET_WITH_DOT'],\n          ['.<>', 'ANGLE_BRACKET_WITH_DOT'],\n          ['<>', 'ANGLE_BRACKET'],\n        ].some(([checkPostFix, syn]) => {\n          isGenericMatch = preferredTypes?.[nodeName + checkPostFix] !== undefined &&\n            syntax === syn;\n          if (isGenericMatch) {\n            typeName += checkPostFix;\n          }\n\n          return isGenericMatch;\n        });\n        if (!isGenericMatch && parentType) {\n          [\n            ['[]', 'SQUARE_BRACKET'],\n            ['.', 'ANGLE_BRACKET_WITH_DOT'],\n            ['.<>', 'ANGLE_BRACKET_WITH_DOT'],\n            ['<>', 'ANGLE_BRACKET'],\n          ].some(([checkPostFix, syn]) => {\n            isGenericMatch = preferredTypes?.[checkPostFix] !== undefined &&\n              syntax === syn;\n            if (isGenericMatch) {\n              typeName = checkPostFix;\n            }\n\n            return isGenericMatch;\n          });\n        }\n      }\n      const directNameMatch = preferredTypes?.[nodeName] !== undefined;\n      const unifiedSyntaxParentMatch = parentType && directNameMatch && unifyParentAndChildTypeChecks;\n      isGenericMatch = isGenericMatch || unifiedSyntaxParentMatch;\n\n      hasMatchingPreferredType = isGenericMatch ||\n        directNameMatch && !parentType;\n    }\n\n    return [hasMatchingPreferredType, typeName, isGenericMatch];\n  };\n\n  jsdocTagsWithPossibleType.forEach((jsdocTag) => {\n    const invalidTypes = [];\n    let typeAst;\n\n    try {\n      typeAst = parse(jsdocTag.type);\n    } catch {\n      return;\n    }\n\n    traverse(typeAst, (node, parentName, parentNode) => {\n      const {type, name} = node;\n      if (!['NAME', 'ANY'].includes(type)) {\n        return;\n      }\n      let nodeName = type === 'ANY' ? '*' : name;\n\n      const [hasMatchingPreferredType, typeName, isGenericMatch] = getPreferredTypeInfo(type, nodeName, parentName, parentNode);\n\n      let preferred;\n      if (hasMatchingPreferredType) {\n        const preferredSetting = preferredTypes[typeName];\n        nodeName = typeName === '[]' ? typeName : nodeName;\n\n        if (!preferredSetting) {\n          invalidTypes.push([nodeName]);\n        } else if (typeof preferredSetting === 'string') {\n          preferred = preferredSetting;\n          invalidTypes.push([nodeName, preferred]);\n        } else if (typeof preferredSetting === 'object') {\n          preferred = preferredSetting?.replacement;\n          invalidTypes.push([\n            nodeName,\n            preferred,\n            preferredSetting?.message,\n          ]);\n        } else {\n          utils.reportSettings(\n            'Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.',\n          );\n\n          return;\n        }\n      } else if (!noDefaults && type === 'NAME') {\n        for (const strictNativeType of strictNativeTypes) {\n          if (strictNativeType.toLowerCase() === nodeName.toLowerCase() &&\n            strictNativeType !== nodeName &&\n\n            // Don't report if user has own map for a strict native type\n            (!preferredTypes || preferredTypes?.[strictNativeType] === undefined)\n          ) {\n            preferred = strictNativeType;\n            invalidTypes.push([nodeName, preferred]);\n            break;\n          }\n        }\n      }\n\n      // For fixer\n      if (preferred) {\n        adjustNames(type, preferred, isGenericMatch, nodeName, node, parentNode);\n      }\n    });\n\n    if (invalidTypes.length) {\n      const fixedType = publish(typeAst);\n\n      const tagName = jsdocTag.tag;\n      invalidTypes.forEach(([badType, preferredType = '', message]) => {\n        const fix = (fixer) => {\n          return fixer.replaceText(\n            jsdocNode,\n            sourceCode.getText(jsdocNode).replace(\n              `{${jsdocTag.type}}`,\n              `{${fixedType}}`,\n            ),\n          );\n        };\n\n        const tagValue = jsdocTag.name ? ` \"${jsdocTag.name}\"` : '';\n        if (exemptTagContexts.some(({tag, types}) => {\n          return tag === tagName &&\n            (types === true || types.includes(jsdocTag.type));\n        })) {\n          return;\n        }\n\n        report(\n          message ||\n            `Invalid JSDoc @${tagName}${tagValue} type \"${badType}\"` +\n            (preferredType ? '; ' : '.') +\n            (preferredType ? `prefer: \"${preferredType}\".` : ''),\n          preferredType ? fix : null,\n          jsdocTag,\n          message ? {\n            tagName,\n            tagValue,\n          } : null,\n        );\n      });\n    }\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          exemptTagContexts: {\n            items: {\n              additionalProperties: false,\n              properties: {\n                tag: {\n                  type: 'string',\n                },\n                types: {\n                  oneOf: [\n                    {\n                      type: 'boolean',\n                    },\n                    {\n                      items: {\n                        type: 'string',\n                      },\n                      type: 'array',\n                    },\n                  ],\n                },\n              },\n              type: 'object',\n            },\n            type: 'array',\n          },\n          noDefaults: {\n            type: 'boolean',\n          },\n          unifyParentAndChildTypeChecks: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"file":"checkTypes.js"}